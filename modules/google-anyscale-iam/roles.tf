locals {
  anyscale_access_serviceacct_role_enabled = var.module_enabled && var.create_anyscale_access_role ? true : false

  anyscale_access_serviceacct_role_id = coalesce(var.anyscale_access_role_id, var.anyscale_access_role_id_prefix, "anyscale_")
  access_acct_role_id_computed = var.enable_random_name_suffix ? format(
    "%s%s",
    local.anyscale_access_serviceacct_role_id,
    random_id.random_char_suffix.hex,
  ) : local.anyscale_access_serviceacct_role_id
}
resource "google_project_iam_custom_role" "anyscale_access_role" {
  count       = local.anyscale_access_serviceacct_role_enabled ? 1 : 0
  project     = var.anyscale_project_id
  role_id     = local.access_acct_role_id_computed
  title       = local.access_acct_role_id_computed
  description = var.anyscale_access_role_description
  permissions = [
    "certificatemanager.certmapentries.create",
    "certificatemanager.certmapentries.delete",
    "certificatemanager.certmapentries.get",
    "certificatemanager.certmaps.create",
    "certificatemanager.certmaps.delete",
    "certificatemanager.certmaps.get",
    "certificatemanager.certmaps.list",
    "certificatemanager.certmaps.use",
    "certificatemanager.certs.create",
    "certificatemanager.certs.delete",
    "certificatemanager.certs.get",
    "certificatemanager.certs.use",
    "certificatemanager.dnsauthorizations.create",
    "certificatemanager.dnsauthorizations.delete",
    "certificatemanager.dnsauthorizations.get",
    "certificatemanager.dnsauthorizations.use",
    "certificatemanager.operations.get",
    "compute.acceleratorTypes.list",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.disks.create",
    "compute.disks.list",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.list",
    "compute.forwardingRules.update",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.update",
    "compute.globalOperations.get",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.get",
    "compute.instances.list",
    "compute.instances.setLabels",
    "compute.instances.setMetadata",
    "compute.instances.setServiceAccount",
    "compute.instances.update",
    "compute.instances.use",
    "compute.machineTypes.list",
    "compute.networks.updatePolicy",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionOperations.get",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.update",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.update",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regions.list",
    "compute.reservations.list",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.update",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.update",
    "compute.targetHttpsProxies.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.zoneOperations.get",
    "compute.zones.list",
    "storage.buckets.get"
  ]
}
